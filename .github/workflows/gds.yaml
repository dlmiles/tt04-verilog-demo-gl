name: gds

on:
  push:
  workflow_dispatch:

jobs:
  gds:
    runs-on: ubuntu-latest
    steps:
      - name: checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Build GDS
        uses: TinyTapeout/tt-gds-action@tt04

  viewer:
    needs: gds
    runs-on: ubuntu-latest
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    steps:
      - uses: TinyTapeout/tt-gds-action/viewer@tt04


##############################################################
# GateLevel sim
  gatelevel:
    needs: gds
    env:
        OPENLANE_TAG:		2023.06.26
        OPENLANE_IMAGE_NAME:	efabless/openlane:3bc9d02d0b34ad032921553e512fbe4bebf1d833-amd64
        OPENLANE_ROOT:		/home/runner/openlane
        PDK_ROOT:		/home/runner/pdk
        PDK:			sky130A
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    #- name: restore runs cache
    #  uses: actions/cache@v3
    #  with:
    #    path: runs
    #    key: ${{ runner.os }}-runs-${{ github.run_id }}

    #- name: restore pdk cache for the primitives needed for GL verification
    #  uses: actions/cache@v3
    #  with:
    #    path: ${{ env.PDK_ROOT }}
    #    key: ${{ runner.os }}-pdk-${{ github.run_id }}

    - name: 'download artifact: GDS_logs'
      uses: actions/download-artifact@v3
      with:
        name: GDS_logs
        path: '.'

    - name: Install OpenLane
      shell: bash
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT

        curl -s -o ./openlane_2023.06.26.patch "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/openlane_2023.06.26.patch"
        patch -p1 < ./openlane_2023.06.26.patch

        curl -s -o ./hotfix_pyyaml.sh "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/hotfix_pyyaml.sh"
        chmod a+x hotfix_pyyaml.sh

        make

    # install oss fpga tools for iVerilog
    - name: install oss-cad-suite
      uses: YosysHQ/setup-oss-cad-suite@v2
      with:
          python-override: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        yosys --version
        iverilog -V
        cocotb-config --libpython
        cocotb-config --python-bin

    - name: test
      run: |
        pwd
        rm -f runs/wokwi/results/final/verilog/gl/*.nl.v
        cp runs/wokwi/results/final/verilog/gl/*.v src/gate_level_netlist.v
        cd src
        make clean
        GATES=yes make
        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results.xml

    - name: upload vcd
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
          name: gatelevel-test-vcd
          path: |
            src/*.vcd


##############################################################
# GateLevel sim
  gatelevel-cvc:
    needs: gds
    env:
        OPENLANE_TAG:		2023.06.26
        OPENLANE_IMAGE_NAME:	efabless/openlane:3bc9d02d0b34ad032921553e512fbe4bebf1d833-amd64
        OPENLANE_ROOT:		/home/runner/openlane
        PDK_ROOT:		/home/runner/pdk
        PDK:			sky130A
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive

    #- name: restore runs cache
    #  uses: actions/cache@v3
    #  with:
    #    path: runs
    #    key: ${{ runner.os }}-runs-${{ github.run_id }}

    #- name: restore pdk cache for the primitives needed for GL verification
    #  uses: actions/cache@v3
    #  with:
    #    path: ${{ env.PDK_ROOT }}
    #    key: ${{ runner.os }}-pdk-${{ github.run_id }}

    - name: 'download artifact: GDS_logs'
      uses: actions/download-artifact@v3
      with:
        name: GDS_logs
        path: '.'

    - name: Install OpenLane
      shell: bash
      run: |
        git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
        cd $OPENLANE_ROOT

        curl -s -o ./openlane_2023.06.26.patch "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/openlane_2023.06.26.patch"
        patch -p1 < ./openlane_2023.06.26.patch

        curl -s -o ./hotfix_pyyaml.sh "https://raw.githubusercontent.com/dlmiles/tt-gds-action/tt04/hotfix_pyyaml.sh"
        chmod a+x hotfix_pyyaml.sh

        make

    # install oss fpga tools for iVerilog
    - name: install oss-cad-suite
      uses: YosysHQ/setup-oss-cad-suite@v2
      with:
          python-override: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
    - run: |
        yosys --version
        iverilog -V
        cocotb-config --libpython
        cocotb-config --python-bin

    - name: build cvc64
      run: |
        sudo ./cvc/build.sh

        sudo cp -av open-src-cvc/bin/cvc64 /usr/local/bin/

        cvc64 -version || true

    - name: prepare cvc64
      run: |
        ./cvc/prepare.sh

        find .
        ls -lR .

    - name: test fast
      run: |
        pwd
        cd src
        make clean

        # with CVC the test has 2 errors but does not display what they are
        set +e
        SIM=cvc make
        echo "EXIT=$?"
        set -e

        cp -v tb.vcd tb_fast.vcd

        test -f results.xml
        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results.xml

    - name: test gatelevel
      run: |
        set +e
        ls -laR  $PDK_ROOT/$PDK/libs.ref/sky130_fd_sc_hd/verilog
        set -e

        pwd
        rm -f runs/wokwi/results/final/verilog/gl/*.nl.v
        cp runs/wokwi/results/final/verilog/gl/*.v src/gate_level_netlist.v
        cd src
        make clean

        GATES=cvc SIM=cvc make

        cp -v tb.vcd tb_gatelevel.vcd

        test -f results.xml
        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results.xml

    - name: test cvc
      run: |
        pwd
        rm -f runs/wokwi/results/final/verilog/gl/*.nl.v
        cp runs/wokwi/results/final/verilog/gl/*.v src/gate_level_netlist.v
        cd src
        make clean

        CVC=yes SIM=cvc make

        cp -v tb.vcd tb_cvc.vcd

        test -f results.xml
        # make will return success even if the test fails, so check for failure in the results.xml
        ! grep failure results.xml

    - name: upload vcd
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
          name: gatelevel-cvc-test-vcd
          path: |
            src/*.vcd

